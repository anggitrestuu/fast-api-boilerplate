"""initial_migrations

Revision ID: 20241113215222
Revises: 
Create Date: 2024-11-13 21:52:22.706233

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '20241113215222'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('ai_models',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('type', sa.Enum('COMPLETION', 'CHAT', 'IMAGE', 'EMBEDDING', 'AUDIO', name='modeltype'), nullable=False),
    sa.Column('version', sa.String(), nullable=False),
    sa.Column('status', sa.Enum('ACTIVE', 'DEPRECATED', 'DISABLED', name='modelstatus'), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('configuration', sa.JSON(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', 'version', name='uq_model_name_version')
    )
    op.create_table('credit_accounts',
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('balance', sa.Numeric(), nullable=False),
    sa.Column('status', sa.Enum('ACTIVE', 'SUSPENDED', 'CLOSED', name='accountstatus'), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.CheckConstraint('(org_id IS NOT NULL AND user_id IS NULL) OR (org_id IS NULL AND user_id IS NOT NULL)', name='valid_owner_check'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('currencies',
    sa.Column('code', sa.String(length=3), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('symbol', sa.String(), nullable=True),
    sa.Column('decimal_places', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('code')  # Add this line to make 'code' unique
    )
    op.create_table('credit_packages',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('credits_amount', sa.Numeric(), nullable=False),
    sa.Column('price_amount', sa.Numeric(), nullable=False),
    sa.Column('price_currency', sa.String(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('valid_from', sa.DateTime(timezone=True), nullable=False),
    sa.Column('valid_to', sa.DateTime(timezone=True), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['price_currency'], ['currencies.code'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('credit_transactions',
    sa.Column('account_id', sa.UUID(), nullable=False),
    sa.Column('amount', sa.Numeric(), nullable=False),
    sa.Column('balance_after', sa.Numeric(), nullable=False),
    sa.Column('type', sa.Enum('PURCHASE', 'USAGE', 'REFUND', 'ADJUSTMENT', name='transactiontype'), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'COMPLETED', 'FAILED', 'REVERSED', name='transactionstatus'), nullable=False),
    sa.Column('reference_type', sa.String(), nullable=False),
    sa.Column('reference_id', sa.UUID(), nullable=False),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['account_id'], ['credit_accounts.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('current_exchange_rates',
    sa.Column('from_currency', sa.String(length=3), nullable=False),
    sa.Column('to_currency', sa.String(length=3), nullable=False),
    sa.Column('rate', sa.Numeric(), nullable=False),
    sa.Column('source', sa.String(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['from_currency'], ['currencies.code'], ),
    sa.ForeignKeyConstraint(['to_currency'], ['currencies.code'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('from_currency', 'to_currency', name='uq_currency_pair')
    )
    op.create_table('current_usage_rates',
    sa.Column('model_id', sa.UUID(), nullable=False),
    sa.Column('token_type', sa.Enum('INPUT', 'OUTPUT', name='tokentype'), nullable=False),
    sa.Column('credits_per_1k_tokens', sa.Numeric(), nullable=False),
    sa.Column('min_tokens', sa.Integer(), nullable=True),
    sa.Column('is_rounded_up', sa.Boolean(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['model_id'], ['ai_models.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('model_metrics',
    sa.Column('model_id', sa.UUID(), nullable=False),
    sa.Column('metric_type', sa.Enum('INPUT_TOKEN', 'OUTPUT_TOKEN', 'IMAGE_GENERATION', 'IMAGE_EDIT', 'IMAGE_VARIATION', 'AUDIO_SECOND', 'AUDIO_MINUTE', 'EMBEDDING_TOKEN', name='modelmetrictype'), nullable=False),
    sa.Column('unit_type', sa.Enum('TOKENS', 'CHARACTERS', 'PIXELS', 'SECONDS', 'MINUTES', 'REQUESTS', name='metricunit'), nullable=False),
    sa.Column('unit_size', sa.Integer(), nullable=False),
    sa.Column('base_cost', sa.Numeric(), nullable=False),
    sa.Column('valid_from', sa.DateTime(timezone=True), nullable=False),
    sa.Column('valid_to', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['model_id'], ['ai_models.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('usage_aggregates_daily',
    sa.Column('account_id', sa.UUID(), nullable=False),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.Column('model_id', sa.UUID(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('total_input_tokens', sa.BigInteger(), nullable=False),
    sa.Column('total_output_tokens', sa.BigInteger(), nullable=False),
    sa.Column('total_input_credits', sa.Numeric(), nullable=False),
    sa.Column('total_output_credits', sa.Numeric(), nullable=False),
    sa.Column('total_credits_consumed', sa.Numeric(), nullable=False),
    sa.Column('total_requests', sa.Integer(), nullable=False),
    sa.Column('successful_requests', sa.Integer(), nullable=False),
    sa.Column('failed_requests', sa.Integer(), nullable=False),
    sa.Column('avg_processing_time_ms', sa.Integer(), nullable=True),
    sa.Column('p95_processing_time_ms', sa.Integer(), nullable=True),
    sa.Column('max_processing_time_ms', sa.Integer(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['account_id'], ['credit_accounts.id'], ),
    sa.ForeignKeyConstraint(['model_id'], ['ai_models.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('usage_quotas',
    sa.Column('account_id', sa.UUID(), nullable=False),
    sa.Column('model_id', sa.UUID(), nullable=False),
    sa.Column('max_daily_credits', sa.Numeric(), nullable=True),
    sa.Column('max_daily_requests', sa.Integer(), nullable=True),
    sa.Column('max_requests_per_minute', sa.Integer(), nullable=True),
    sa.Column('max_tokens_per_request', sa.Integer(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['account_id'], ['credit_accounts.id'], ),
    sa.ForeignKeyConstraint(['model_id'], ['ai_models.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('credit_purchases',
    sa.Column('account_id', sa.UUID(), nullable=False),
    sa.Column('package_id', sa.UUID(), nullable=False),
    sa.Column('credits_amount', sa.Numeric(), nullable=False),
    sa.Column('price_amount', sa.Numeric(), nullable=False),
    sa.Column('price_currency', sa.String(), nullable=False),
    sa.Column('payment_method', sa.String(), nullable=True),
    sa.Column('payment_reference', sa.String(), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'COMPLETED', 'FAILED', 'REFUNDED', name='purchasestatus'), nullable=False),
    sa.Column('transaction_id', sa.UUID(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['account_id'], ['credit_accounts.id'], ),
    sa.ForeignKeyConstraint(['package_id'], ['credit_packages.id'], ),
    sa.ForeignKeyConstraint(['price_currency'], ['currencies.code'], ),
    sa.ForeignKeyConstraint(['transaction_id'], ['credit_transactions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('historical_exchange_rates',
    sa.Column('current_rate_id', sa.UUID(), nullable=False),
    sa.Column('rate', sa.Numeric(), nullable=False),
    sa.Column('valid_from', sa.DateTime(timezone=True), nullable=False),
    sa.Column('valid_to', sa.DateTime(timezone=True), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['current_rate_id'], ['current_exchange_rates.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('historical_usage_rates',
    sa.Column('current_rate_id', sa.UUID(), nullable=False),
    sa.Column('credits_per_1k_tokens', sa.Numeric(), nullable=False),
    sa.Column('valid_from', sa.DateTime(timezone=True), nullable=False),
    sa.Column('valid_to', sa.DateTime(timezone=True), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['current_rate_id'], ['current_usage_rates.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('usage_events',
    sa.Column('account_id', sa.UUID(), nullable=False),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('model_id', sa.UUID(), nullable=False),
    sa.Column('request_id', sa.UUID(), nullable=True),
    sa.Column('input_tokens', sa.Integer(), nullable=False),
    sa.Column('output_tokens', sa.Integer(), nullable=False),
    sa.Column('credits_consumed', sa.Numeric(), nullable=False),
    sa.Column('credit_transaction_id', sa.UUID(), nullable=True),
    sa.Column('success', sa.Boolean(), nullable=False),
    sa.Column('error_code', sa.String(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('ip_address', sa.String(), nullable=True),
    sa.Column('user_agent', sa.String(), nullable=True),
    sa.Column('requested_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('processed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['account_id'], ['credit_accounts.id'], ),
    sa.ForeignKeyConstraint(['credit_transaction_id'], ['credit_transactions.id'], ),
    sa.ForeignKeyConstraint(['model_id'], ['ai_models.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('request_id')
    )
    op.create_table('usage_event_metadata',
    sa.Column('usage_event_id', sa.UUID(), nullable=False),
    sa.Column('metadata_type', sa.String(), nullable=False),
    sa.Column('key', sa.String(), nullable=False),
    sa.Column('value', sa.Text(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['usage_event_id'], ['usage_events.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('usage_event_metadata')
    op.drop_table('usage_events')
    op.drop_table('historical_usage_rates')
    op.drop_table('historical_exchange_rates')
    op.drop_table('credit_purchases')
    op.drop_table('usage_quotas')
    op.drop_table('usage_aggregates_daily')
    op.drop_table('model_metrics')
    op.drop_table('current_usage_rates')
    op.drop_table('current_exchange_rates')
    op.drop_table('credit_transactions')
    op.drop_table('credit_packages')
    op.drop_table('currencies')
    op.drop_table('credit_accounts')
    op.drop_table('ai_models')
    # ### end Alembic commands ###
